<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yunrap.github.io/</id><title>yunrap</title><subtitle>Blog</subtitle> <updated>2022-02-27T17:11:25+09:00</updated> <author> <name>yunrap</name> <uri>https://yunrap.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://yunrap.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://yunrap.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 yunrap </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>스프링배치 Chunk 프로세스 이해</title><link href="https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98-Chunk-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%B4%ED%95%B4/" rel="alternate" type="text/html" title="스프링배치 Chunk 프로세스 이해" /><published>2022-01-29T21:33:00+09:00</published> <updated>2022-02-27T17:10:49+09:00</updated> <id>https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98-Chunk-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%B4%ED%95%B4/</id> <content src="https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98-Chunk-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%B4%ED%95%B4/" /> <author> <name>yunrap</name> </author> <category term="BACKEND" /> <category term="SPRING BATCH" /> <summary> 1. chunk 기본개념t Cunck란 여러개의 아이템을 묶은 하나의 덩어리를 의미한다.수정 한번에 하나씩 아이템을 입력받아 Chunk 단위의 덩어리로만들어 Cunck 단위로 트랙잭션을 처리한다, Cunck 단위의 Commit과 Rollback이 이루어짐 일반적으로 청크 단위로 쪼개어 더이상 처리할 데이터가 없을때까지 반복해서 입출력하는데 사용된다. 입력기가 item들을 읽어서 원안에 저장한다. 이원들이 청크가된다 이덩어리의 청크를 출력기에 보낼때는 item의 묶음인 items로 하나의 단위로 묶어서 보낸다. ![chunk 와 chunk의 흐름도](/assets/img/springbatch/chunk2.png) Source로 부터 한건씩얻고 Cunck 크기만큼의 i... </summary> </entry> <entry><title>스프링배치 시작</title><link href="https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B0%B0%EC%B9%98-%EC%8B%9C%EC%9E%91/" rel="alternate" type="text/html" title="스프링배치 시작" /><published>2022-01-23T21:33:00+09:00</published> <updated>2022-01-23T21:33:00+09:00</updated> <id>https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B0%B0%EC%B9%98-%EC%8B%9C%EC%9E%91/</id> <content src="https://yunrap.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B0%B0%EC%B9%98-%EC%8B%9C%EC%9E%91/" /> <author> <name>yunrap</name> </author> <category term="BACKEND" /> <category term="SPRING BATCH" /> <summary> 1. @EnableBatchProcessing 스프링 배치가 작동하기 위해 선언해야 하는 어노테이션 @EnableBatchProcessing @SpringBootApplication public class StudySpringBatchApplication { public static void main(String[] args) { SpringApplication.run(StudySpringBatchApplication.class, args); } } 모든 빈들의 모든 Job을 검색해서 초기화와 동시에 Job을 수행하도록 구성됨 2. 스프링 배치 초기화 설정 클래스(4개) 우선은 이런것이있구나하고 넘어간다 1. BacthAutoConfiguration 스프... </summary> </entry> <entry><title>DI , IOC 의 개념</title><link href="https://yunrap.github.io/posts/di-ioc%EA%B0%9C%EB%85%90/" rel="alternate" type="text/html" title="DI , IOC 의 개념" /><published>2021-12-26T21:33:00+09:00</published> <updated>2021-12-26T17:42:46+09:00</updated> <id>https://yunrap.github.io/posts/di-ioc%EA%B0%9C%EB%85%90/</id> <content src="https://yunrap.github.io/posts/di-ioc%EA%B0%9C%EB%85%90/" /> <author> <name>yunrap</name> </author> <category term="BACKEND" /> <category term="SPRING" /> <summary> 우선 스프링의 큰개념인 DI에대해서 알아보자 https://asfirstalways.tistory.com/334 참고 java bean 우선 java bean에대해서 알아보자 java Bean 규약에 맞춰서 만든 클래스를 뜻한다 &amp;lt;Java Bean 규약&amp;gt; 1. 기본생성자가 존재해야한다. 2. 모든 멤버변수의 접근제어자는 private이다. 3. 멤버변수마다 getter/setter가 존재해야한다. (속성이 boolean일 경우 is를 붙힘) 4. 외부에서 멤버변수에 접근하기 위해서는 메소드로만 접근할 수 있다. 5. Serializable(직렬화)가 가능해야한다. 직렬화 직렬화란 시스템 내부에서 사용하는 객체 혹은 외부의 시스템에서도 사용할수있도록 변환시키는것을 말한다. ... </summary> </entry> <entry><title>바닐라 JS 챌린지 6</title><link href="https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%806/" rel="alternate" type="text/html" title="바닐라 JS 챌린지 6" /><published>2021-11-23T21:33:00+09:00</published> <updated>2021-12-26T17:42:46+09:00</updated> <id>https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%806/</id> <content src="https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%806/" /> <author> <name>yunrap</name> </author> <category term="FRONTEND" /> <category term="바닐라JS" /> <summary> preventDefault 사용 기존에 저장되어있던 자바스크립트의 이벤트들이 동작하지않게끔 막아준다. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Vanilla Challenge&amp;lt;/title&amp;gt; &amp;lt;meta charset="UTF-8" /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id="login-form"&amp;gt; &amp;lt;input required maxlength="40" type="text" id="createId" value="" /&amp;gt; &amp;lt;button&amp;gt;dddd&amp;lt;/button&amp;gt; &amp;lt;a href=... </summary> </entry> <entry><title>바닐라 JS 챌린지 5</title><link href="https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%805/" rel="alternate" type="text/html" title="바닐라 JS 챌린지 5" /><published>2021-11-20T21:33:00+09:00</published> <updated>2021-12-26T17:42:46+09:00</updated> <id>https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%805/</id> <content src="https://yunrap.github.io/posts/%EB%B0%94%EB%8B%90%EB%9D%BC-JS-%EC%B1%8C%EB%A6%B0%EC%A7%805/" /> <author> <name>yunrap</name> </author> <category term="FRONTEND" /> <category term="바닐라JS" /> <summary> 변수를 정의할때 실제 let과 const의 쓰임을 적절하게 사용한다면 코드를 더 객체지향적으로 만들수있는거같다 const h1 = document.querySelector("div.hello:first-child h1") console.log(h1); function handleTitleClick() { const currentColor = h1.style.color; let newColor; if(currentColor === "blue") { h1.style.colornewColor = "tomato"; }else { newColor = "blue"; } h1.style.color = newColor; } h1.addEventLis... </summary> </entry> </feed>
